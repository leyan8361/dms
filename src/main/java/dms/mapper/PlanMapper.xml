<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="dms.dao.PlanDao">

	<!-- 获取线路列表 -->
	<select id="getLineList" resultType="line">
		select id,lineNo
		from t_line
		where isShow = 'show'
	</select>

	<!-- 获取线路下车站列表 -->
	<select id="getLineStationList" parameterType="String" resultType="lineStation">
		select id,lineId,station
		from t_line_station
		where isShow = 'show' and lineId = #{lineId}
	</select>
	
	<!-- 校验预案名称是否重复 -->
	<select id="checkPlanName" parameterType="String" resultType="plan">
		select *
		from t_plan
		where isShow = 'show' and name = #{name}
	</select>
	
	<!-- 添加预案 -->
	<insert id="addPlan" parameterType="plan" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into
		t_plan
		(name,lineId,lineNo,stationId,stationName)
		values
		(#{name},#{lineId},#{lineNo},#{stationId},#{stationName})
	</insert>
	
	<!-- 添加预案附件 -->
	<insert id="addPlanAttach" parameterType="List">
		insert into
		t_planattach
		(planId,path)
		values
		<foreach collection="list" item="pa" separator=",">
			(#{pa.planId},#{pa.path})
		</foreach>
	</insert>
	
	<!-- 查询预案列表 -->
	<select id="getPlanList" resultType="plan">
		select id,name,lineId,lineNo,stationId,stationName
		from t_plan
		where isShow = 'show'
		<if test="lineId!=''">
			and lineId = #{lineId}
		</if>
		<if test="stationId!=''">
			and stationId = #{stationId}
		</if>
		<if test="name!=''">
			and name = #{name}
		</if>
		order by id desc
	</select>
	
	<!-- 查询预案详情 -->
    <select id="getPlanInfo" parameterType="int" resultMap="planAttachMap">
		select 
		t1.id,t1.name,t1.lineId,t1.lineNo,t1.stationId,t1.stationName,t2.id as attachId,t2.path
		from 
		(select * from t_plan where isShow = 'show' and id = #{id}) t1
		left join
		t_planattach t2
		on t2.isShow = 'show' and t2.planId = t1.id
	</select>
	
	<resultMap type="plan" id="planAttachMap">
		 <id column="id" property="id" />
		 <result column="name" property="name" />
		 <result column="lineId" property="lineId" />
		 <result column="lineNo" property="lineNo" />
		 <result column="stationId" property="stationId" />
		 <result column="stationName" property="stationName" />
		 <collection property="lpa" ofType="planAttach" column="id">
		 	<id column="attachId" property="id" />
		 	<result column="path" property="path" />
		 </collection>
	</resultMap>
	
	<!-- 删除预案的附件 -->
	<update id="delPlanAttach" parameterType="String">
		update t_planattach
		set isShow = 'notShow'
		where id ${str}
	</update>
	
	<!-- 编辑预案信息 -->
	<update id="updatePlanInfo">
		update t_plan
		set name = #{name},lineId = #{lineId},lineNo = #{lineNo},stationId = #{stationId},stationName = #{stationName}
		where id = #{id}
	</update>
	
	<!-- 删除预案 -->
	<update id="delPlan" parameterType="int">
		update t_plan
		set isShow = 'notShow'
		where id = #{id}
	</update>
	
	<!-- 获取预案的.pdf附件信息 -->
	<select id="getPlanAttach" parameterType="int" resultType="String">
		select
		path
		from t_planattach
		where planId = #{id} and isShow = 'show' and path like '%.pdf'
	</select>
	
	<!-- 新增流程库表 -->
	<insert id="addProcess" parameterType="process" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		insert into 
		t_process
		(name,creator,createDate)
		values
		(#{name},#{creator},#{createDate})
	</insert>
	
	<!-- 新增流程库表列信息 -->
	<insert id="addProcessColumn" parameterType="processColumn">
		insert into
		t_process_column
		(processId,name,type)
		values
		<foreach collection="list" item="pc" separator=",">
			(#{pc.processId},#{pc.name},#{pc.type})
		</foreach>
	</insert>
	
	<!-- 查询流程库表列表 -->
	<select id="getProcessList" resultType="process">
		select t1.id,t1.name,count(t2.id) as columnNum
		from t_process t1,t_process_column t2
		where t1.id = t2.processId and t1.isShow = 'show'
		group by t1.id
	</select>
	
	<!-- 查询流程库表详情 -->
	<select id="getProcessInfo" parameterType="int" resultMap="getProcessMap">
		select t1.id,t1.name,t2.id as cid,t2.name as cname,t2.type
		from t_process t1,t_process_column t2
		where t1.isShow = 'show' and t2.isShow = 'show' and t1.id = t2.processId and t1.id = #{id}
	</select>
	
	<resultMap type="process" id="getProcessMap">
		<id column="id" property="id" />
		<result column="name" property="name" />
		<collection property="lpc" ofType="processColumn">
			<id column="cid" property="id" />
			<result column="cname" property="name" />
			<result column="type" property="type" />
		</collection>
	</resultMap>
	
	<!-- 修改流程库表信息 -->
	<update id="updateProcessInfo">
		update t_process
		set name = #{name}
		where id = #{id}
	</update>
	
	<!-- 修改流程库表列信息 -->
	<update id="updateProcessColumnInfo">
		update t_process_column
		set name = #{name}
		where id = #{id}
	</update>
	
	<!-- 删除流程库表信息 -->
	<update id="delProcess" parameterType="int">
		update t_process
		set isShow = 'notShow'
		where id = #{id}
	</update>
	
	<!-- 获取指定流程库表列名信息 -->
	<select id="getProcessColumnNameInfo" parameterType="String" resultType="processColumn">
		select id,name,type
		from t_process_column
		where isShow = 'show' and processId = #{id} order by id asc
	</select>
	
	<!-- 添加流程库表内容 -->
	<insert id="addProcessContent" parameterType="processContent">
		insert into
		t_process_content
		(processId,columnId,flag,content)
		values
		<foreach collection="list" item="pc" separator=",">
			(#{pc.processId},#{pc.columnId},#{pc.flag},#{pc.content})
		</foreach>
	</insert>
	
	<!-- 查询流程表库某一行是否有某列的信息 -->
	<select id="JudgeColumnIdByProcess2IdAndFlag" resultType="String">
		select
		columnId 
		from t_process_content
		where isShow = 'show' and processId = #{processId} and flag = #{flag} and columnId = #{columnId}
	</select>
	
	<!-- 修改流程库表内容 -->
	<update id="updateProcessContent">
		update t_process_content
		set content = #{content}
		where processId = #{processId} and columnId = #{columnId} and flag = #{flag}
	</update>
	
	<!-- 删除流程库表内容 -->
	<update id="delProcessContent">
		update t_process_content
		set isShow = 'notShow'
		where processId = #{processId} and flag = #{flag}
	</update>
	
	<!-- 查询流程库表内容 -->
	<select id="getProcessContentList" parameterType="int" resultType="processContent">
		select 
		processId,columnId,flag,content 
		from t_process_content 
		where processId = #{processId} and isShow = 'show' order by columnId
	</select>
	
	<!-- 新增资料库 -->
	<insert id="addInfo" parameterType="info" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		insert into
		t_info
		(name,creator,createDate)
		values
		(#{name},#{creator},#{createDate})
	</insert>
	
	<!-- 添加资料库列信息 -->
	<insert id="addInfoColumn" parameterType="infoColumn">
		insert into
		t_info_column
		(infoId,name,type)
		values
		<foreach collection="list" item="ic" separator=",">
			(#{ic.infoId},#{ic.name},#{ic.type})
		</foreach>
	</insert>
	
	<!-- 查询资料库列表 -->
	<select id="getInfoList" resultType="info">
		select t1.id,t1.name,count(t2.id) as columnNum
		from t_info t1,t_info_column t2
		where t1.id = t2.infoId and t1.isShow = 'show'
		group by t1.id
	</select>
	
	<!-- 查询资料库详情 -->
	<select id="getInfoInfo" parameterType="int" resultMap="getInfoMap">
		select t1.id,t1.name,t2.id as cid,t2.name as cname,t2.type
		from t_info t1,t_info_column t2
		where t1.isShow = 'show' and t2.isShow = 'show' and t1.id = t2.infoId and t1.id = #{id}
	</select>
	
	<resultMap type="info" id="getInfoMap">
		<id column="id" property="id" />
		<result column="name" property="name" />
		<collection property="lic" ofType="infoColumn">
			<id column="cid" property="id" />
			<result column="cname" property="name" />
			<result column="type" property="type" />
		</collection>
	</resultMap>
	
	<!-- 修改资料库信息 -->
	<update id="updateInfoInfo">
		update t_info
		set name = #{name}
		where id = #{id}
	</update>
	
	<!-- 修改资料库列信息 -->
	<update id="updateInfoColumnInfo">
		update t_info_column
		set name = #{name}
		where id = #{id}
	</update>
	
	<!-- 删除资料库 -->
	<update id="delInfo" parameterType="int">
		update t_info
		set isShow = 'notShow'
		where id = #{id}
	</update>
	
	<!-- 获取指定流程库列名信息 -->
	<select id="getInfoColumnNameInfo" parameterType="String" resultType="infoColumn">
		select id,name,type
		from t_info_column
		where isShow = 'show' and infoId = #{id} order by id asc
	</select>
	
	<!-- 添加资料库内容 -->
	<insert id="addInfoContent" parameterType="infoContent">
		insert into
		t_info_content
		(infoId,columnId,flag,content)
		values
		<foreach collection="list" item="ic" separator=",">
			(#{ic.infoId},#{ic.columnId},#{ic.flag},#{ic.content})
		</foreach>
	</insert>
	
	<!-- 判断某一行中是否有这列数据 -->
	<select id="JudgeColumnIdByProcessIdAndFlag" resultType="String">
		select
		columnId 
		from t_info_content
		where isShow = 'show' and infoId = #{infoId} and flag = #{flag} and columnId = #{columnId} 
	</select>
	
	<!-- 修改资料库内容 -->
	<update id="updateInfoContent">
		update t_info_content
		set content = #{content}
		where infoId = #{infoId} and columnId = #{columnId} and flag = #{flag}
	</update>
	
	<!-- 删除资料库内容 -->
	<update id="delInfoContent">
		update t_info_content
		set isShow = 'notShow'
		where infoId = #{infoId} and flag = #{flag}
	</update>
	
	<!-- 查询资料库内容 -->
	<select id="getInfoContentList" parameterType="int" resultType="infoContent">
		select 
		infoId,columnId,flag,content 
		from t_info_content 
		where infoId = #{infoId} and isShow = 'show' order by columnId
	</select>
	
	<!-- 获取运营报告编号 -->
	<select id="getAccidentReportNo" resultType="String">
		select 
		no 
		from t_accident_report_no 
		where id = 1
	</select>
	
	<!-- 修改运营报告编号 -->
	<update id="updateAccidentReportNo" parameterType="String">
		update t_accident_report_no
		set no = #{no}
		where id = 1
	</update>
	
	<!-- 新增运营事故报告 -->
	<insert id="addAccidentReport" parameterType="accidentReport" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		insert into
		t_accident_report
		(no,eventName,eventAddress,occurDate,relatedPerson,rank,eventSummary,affect,analysisAndReform,opinion,analysisMember,
		otherExplain,fillDepart,fillDate,fillPerson,responsiblePerson)
		values
		(#{no},#{eventName},#{eventAddress},#{occurDate},#{relatedPerson},#{rank},#{eventSummary},#{affect},#{analysisAndReform},#{opinion},#{analysisMember},
		#{otherExplain},#{fillDepart},#{fillDate},#{fillPerson},#{responsiblePerson})
	</insert>
	
	<!-- 新增运营事故报告附件 -->
	<insert id="addAccidentReportAttach" parameterType="accidentReportAttach">
		insert into
		t_accident_report_attach
		(reportId,path)
		values
		<foreach collection="list" item="ara" separator=",">
			(#{ara.reportId},#{ara.path})
		</foreach>
	</insert>
	
	<!-- 获取运营事故报告列表 -->
	<select id="getAccidentReportList" parameterType="String" resultType="map">
		select
		id,eventName
		from t_accident_report
		where isShow = 'show'
		<if test="eventName!=''">
			and eventName = #{eventName}
		</if>
		<if test="eventAddress!=''">
			and eventAddress = #{eventAddress}
		</if>
		<if test="rank!=''">
			and rank = #{rank}
		</if>
		<if test="occurDate!=''">
			and occurDate = #{occurDate}
		</if>
	</select>
	
	<!-- 获取运营报告附件列表 -->
	<select id="getAccidentReportAttachList" parameterType="int" resultType="String">
		select 
		path
		from t_accident_report_attach
		where reportId = #{id} and isShow = 'show' and path like '%.pdf'
	</select>
	
	<!-- 获取运营报告详情 -->
	<select id="getAccidentReportInfo" parameterType="int" resultMap="getAccidentReportInfoMap">
		select 
		t1.*,t2.id as sid,t2.path
		from 
		(select * from t_accident_report where id = #{id} and isShow = 'show') t1
		LEFT JOIN
		t_accident_report_attach t2
		on t1.id = t2.reportId and t2.isShow = 'show'
	</select>
	
	<resultMap type="accidentReport" id="getAccidentReportInfoMap">
		<id column="id" property="id" />
		<result column="no" property="no" />
		<result column="eventName" property="eventName" />
		<result column="eventAddress" property="eventAddress" />
		<result column="occurDate" property="occurDate" />
		<result column="relatedPerson" property="relatedPerson" />
		<result column="rank" property="rank" />
		<result column="eventSummary" property="eventSummary" />
		<result column="affect" property="affect" />
		<result column="analysisAndReform" property="analysisAndReform" />
		<result column="opinion" property="opinion" />
		<result column="analysisMember" property="analysisMember" />
		<result column="otherExplain" property="otherExplain" />
		<result column="fillDepart" property="fillDepart" />
		<result column="fillDate" property="fillDate" />
		<result column="fillPerson" property="fillPerson" />
		<result column="responsiblePerson" property="responsiblePerson" /> 
		<collection property="lara" ofType="accidentReportAttach">
			<id column="sid" property="id" />
			<result column="path" property="path" />
		</collection>
	</resultMap>
	
	<!-- 修改事故报告内容 -->
	<update id="updateAccidentReportInfo">
		update t_accident_report
		set 
		eventName = #{eventName},eventAddress = #{eventAddress},occurDate = #{occurDate},relatedPerson=#{relatedPerson},
		rank = #{rank},eventSummary = #{eventSummary},affect = #{affect},analysisAndReform = #{analysisAndReform},
		opinion = #{opinion},analysisMember = #{analysisMember},otherExplain = #{otherExplain},fillDepart = #{fillDepart},
		fillDate = #{fillDate},fillPerson = #{fillPerson},responsiblePerson = #{responsiblePerson}
		where id = #{id}
	</update>
	
	<!-- 删除事故报告的附件 -->
	<update id="delAccidentReportAttachInfo">
		update t_accident_report_attach
		set isShow = 'notShow'
		where id ${id}
	</update>
	
	<!-- 删除事故报告 -->
	<update id="delAccidentReportInfo" parameterType="int">
		update t_accident_report
		set isShow = 'notShow'
		where id = #{id}
	</update>
</mapper>